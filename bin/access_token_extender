#!/usr/bin/env ruby

require 'optparse'

options = {}

parser = OptionParser.new do |opts|
  opts.banner = "Usage: #{$PROGRAM_NAME} [options]"

  opts.on('-t [CURRENT_PAGE_ACCESS_TOKEN]', 'set what access token value should be used as the old access token in the refresh process') do |current_access_token|
    options[:current_access_token] = current_access_token
  end
end

parser.parse!


require 'koala'

app_id = ENV['APP_ID']
app_secret = ENV['APP_SECRET']

app_access_token = AccessToken.find_or_initialize_by(name: "app")
app_access_token.value = Koala::Facebook::OAuth.new(app_id, app_secret).get_app_access_token
app_access_token.save


page_access_token = AccessToken.find_or_initialize_by(name: "page")
current_access_token = options[:current_access_token] || page_access_token.value || abort("database has no such access token with page")
graph = Koala::Facebook::API.new(app_access_token.value, ENV['APP_SECRET'])
params = {
  grant_type: 'fb_exchange_token',
  client_id: app_id,
  client_secret: app_secret,
  fb_exchange_token: current_access_token
}
page_access_token.value = graph.graph_call('/oauth/access_token', params, 'get', use_ssl: true)['access_token']
page_access_token.save
